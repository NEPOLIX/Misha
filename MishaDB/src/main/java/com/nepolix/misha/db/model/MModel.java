/******************************************************************************
 * Copyright Â© 2015-7532 NOX, Inc. [NEPOLIX]-(Behrooz Shahriari)              *
 *           All rights reserved.                                             *
 *                                                                            *
 *     The source code, other & all material, and documentation               *
 *     contained herein are, and remains the property of HEX Inc.             *
 *     and its suppliers, if any. The intellectual and technical              *
 *     concepts contained herein are proprietary to NOX Inc. and its          *
 *     suppliers and may be covered by U.S. and Foreign Patents, patents      *
 *     in process, and are protected by trade secret or copyright law.        *
 *     Dissemination of the foregoing material or reproduction of this        *
 *     material is strictly forbidden forever.                                *
 ******************************************************************************/

package com.nepolix.misha.db.model;

import com.nepolix.misha.commons.utils.Utils;
import com.nepolix.misha.db.MishaDB;
import com.nepolix.misha.json.JSONObject;
import com.nepolix.misha.json.serialization.MJSON;

/**
 * @author Behrooz Shahriari
 * @since 11/14/16
 */
public abstract
class MModel
{
	 
	 protected final static String REMOVAL_PREFIX_SYMBOL = "_$";
	 
	 protected String mid;
	 
	 protected long createTime;
	 
	 protected long updateTime;
	 
	 protected String createdDate;
	 
	 protected String updatedDate;
	 
	 protected boolean deleted;
	 
	 protected int version;
	 
	 public
	 MModel ( )
	 {
			
			version = 0;
	 }
	 
	 public static
	 < T extends MModel > String getModelName ( Class< T > clazz )
	 {
			
			try
			{
				 MModel mModel = clazz.newInstance ( );
				 return mModel.modelName ( );
			}
			catch ( InstantiationException | IllegalAccessException e )
			{
				 e.printStackTrace ( );
			}
			return "null";
	 }
	 
	 public abstract
	 String modelName ( );
	 
	 
	 public static
	 < T extends MModel > JSONObject $modelMigration ( JSONObject rowModel ,
																										 Class< T > clazz ,
																										 int newVersion )
	 {
			
			int version = rowModel.optInt ( "version" , 0 );
			if ( newVersion != version )
			{
				 try
				 {
						MModel             mModel             = clazz.newInstance ( );
						IMigrationProtocol iMigrationProtocol = mModel.$getMigrationProtocol ( newVersion );
						if ( iMigrationProtocol != null )
						{
							 rowModel = iMigrationProtocol.migrate ( rowModel );
							 rowModel.putOpt ( "version" , newVersion );
							 return rowModel;
						}
						else throw new NullPointerException ( "no migration protocol was found" );
				 }
				 catch ( InstantiationException | IllegalAccessException e )
				 {
						e.printStackTrace ( );
				 }
			}
			return rowModel;
	 }
	 
	 protected abstract
	 IMigrationProtocol $getMigrationProtocol ( int version );
	 
	 public static
	 < E extends MModel > void $deleteDB ( E mModel ,
																				 MishaDB db )
	 {
			
			db.deleteObjects ( Utils.singletonList ( mModel.getMid ( ) ) , mModel.modelName ( ) );
	 }
	 
	 public
	 String getMid ( )
	 {
			
			return mid;
	 }
	 
	 /**
		* do not use it unless you know what you are doing this ID is auto generated by MishaId and it is unique in our platform
		*
		* @param mid
		*/
	 public
	 void setMid ( String mid )
	 {
			
			this.mid = mid;
	 }
	 
	 public
	 int getVersion ( )
	 {
			
			return version;
	 }
	 
	 public
	 void setVersion ( int version )
	 {
			
			this.version = version;
	 }
	 
	 public
	 String getCreatedDate ( )
	 {
			
			return createdDate;
	 }
	 
	 public
	 void setCreatedDate ( String createdDate )
	 {
			
			this.createdDate = createdDate;
	 }
	 
	 public
	 String getUpdatedDate ( )
	 {
			
			return updatedDate;
	 }
	 
	 public
	 void setUpdatedDate ( String updatedDate )
	 {
			
			this.updatedDate = updatedDate;
	 }
	 
	 public
	 long getCreateTime ( )
	 {
			
			return createTime;
	 }
	 
	 public
	 void setCreateTime ( long createTime )
	 {
			
			this.createTime = createTime;
	 }
	 
	 public
	 long getUpdateTime ( )
	 {
			
			return updateTime;
	 }
	 
	 public
	 void setUpdateTime ( long updateTime )
	 {
			
			this.updateTime = updateTime;
	 }
	 
	 public
	 boolean getDeleted ( )
	 {
			
			return deleted;
	 }
	 
	 public
	 void setDeleted ( boolean deleted )
	 {
			
			this.deleted = deleted;
	 }
	 
	 public static
	 < E extends MModel > void $save ( E mModel ,
																		 MishaDB db )
	 {
			
			try
			{
				 mModel.updatedDate = Utils.getCurrentFormattedUTCTime ( );
				 mModel.updateTime = Utils.getCurrentUTCTime ( );
				 db.save ( mModel );
			}
			catch ( Exception e )
			{
				 e.printStackTrace ( );
			}
	 }
	 
	 public abstract
	 void $save ( );
	 
	 public abstract
	 void $delete ( boolean keep );
	 
	 @Override
	 public
	 int hashCode ( )
	 {
			
			return getMid ( ).hashCode ( );
	 }
	 
	 @Override
	 public
	 boolean equals ( Object obj )
	 {
			
			if ( obj == null ) return false;
			MModel mModel = ( MModel ) obj;
			return mModel.getMid ( ).equals ( getMid ( ) );
	 }
	 
	 @Override
	 public
	 String toString ( )
	 {
		 
			return MJSON.toString ( this );
	 }
}
